<?php
 require_once("base_connector.php"); require_once("grid_config.php"); class GridDataItem extends DataItem{ protected $row_attrs; protected $cell_attrs; function __construct($data,$name,$index=0){ parent::__construct($data,$name,$index); $this->row_attrs=array(); $this->cell_attrs=array(); } function set_row_color($color){ $this->row_attrs["bgColor"]=$color; } function set_row_style($color){ $this->row_attrs["style"]=$color; } function set_cell_style($name,$value){ $this->set_cell_attribute($name,"style",$value); } function set_cell_class($name,$value){ $this->set_cell_attribute($name,"class",$value); } function set_cell_attribute($name,$attr,$value){ if (!array_key_exists($name, $this->cell_attrs)) $this->cell_attrs[$name]=array(); $this->cell_attrs[$name][$attr]=$value; } function set_row_attribute($attr,$value){ $this->row_attrs[$attr]=$value; } public function to_xml_start(){ if ($this->skip) return ""; $str="<row id='".$this->get_id()."'"; foreach ($this->row_attrs as $k=>$v) $str.=" ".$k."='".$v."'"; $str.=">"; for ($i=0; $i < sizeof($this->config->text); $i++){ $str.="<cell"; $name=$this->config->text[$i]["name"]; if (isset($this->cell_attrs[$name])){ $cattrs=$this->cell_attrs[$name]; foreach ($cattrs as $k => $v) $str.=" ".$k."='".$this->xmlentities($v)."'"; } $value = isset($this->data[$name]) ? $this->data[$name] : ''; $str.="><![CDATA[".$value."]]></cell>"; } if ($this->userdata !== false) foreach ($this->userdata as $key => $value) $str.="<userdata name='".$key."'><![CDATA[".$value."]]></userdata>"; return $str; } public function to_xml_end(){ if ($this->skip) return ""; return "</row>"; } } class GridConnector extends Connector{ public function __construct($res,$type=false,$item_type=false,$data_type=false,$render_type=false){ if (!$item_type) $item_type="GridDataItem"; if (!$data_type) $data_type="GridDataProcessor"; if (!$render_type) $render_type="RenderStrategy"; parent::__construct($res,$type,$item_type,$data_type,$render_type); } protected function parse_request(){ parent::parse_request(); if (isset($_GET["dhx_colls"])) $this->fill_collections($_GET["dhx_colls"]); } protected function resolve_parameter($name){ if (intval($name).""==$name) return $this->config->text[intval($name)]["db_name"]; return $name; } protected function xmlentities($string) { return str_replace( array( '&', '"', "'", '<', '>', 'â€™' ), array( '&amp;' , '&quot;', '&apos;' , '&lt;' , '&gt;', '&apos;' ), $string); } public function set_options($name,$options){ if (is_array($options)){ $str=""; foreach($options as $k => $v) $str.="<item value='".$this->xmlentities($k)."' label='".$this->xmlentities($v)."' />"; $options=$str; } $this->options[$name]=$options; } protected function fill_collections($list=""){ $names=explode(",",$list); for ($i=0; $i < sizeof($names); $i++) { $name = $this->resolve_parameter($names[$i]); if (!array_key_exists($name,$this->options)){ $this->options[$name] = new DistinctOptionsConnector($this->get_connection(),$this->names["db_class"]); $c = new DataConfig($this->config); $r = new DataRequestConfig($this->request); $c->minimize($name); $this->options[$name]->render_connector($c,$r); } $this->extra_output.="<coll_options for='{$names[$i]}'>"; if (!is_string($this->options[$name])) $this->extra_output.=$this->options[$name]->render(); else $this->extra_output.=$this->options[$name]; $this->extra_output.="</coll_options>"; } } protected function xml_start(){ $attributes = ""; foreach($this->attributes as $k=>$v) $attributes .= " ".$k."='".$v."'"; if ($this->dload){ if ($pos=$this->request->get_start()) return "<rows pos='".$pos."'".$attributes.">"; else return "<rows total_count='".$this->sql->get_size($this->request)."'".$attributes.">"; } else return "<rows".$attributes.">"; } protected function xml_end(){ return $this->extra_output."</rows>"; } public function set_config($config = false){ if (gettype($config) == 'boolean') $config = new GridConfiguration($config); $this->event->attach("beforeOutput", Array($config, "attachHeaderToXML")); $this->event->attach("onInit", Array($config, "defineOptions")); } } class GridDataProcessor extends DataProcessor{ function name_data($data){ if ($data == "gr_id") return $this->config->id["name"]; $parts=explode("c",$data); if ($parts[0]=="" && ((string)intval($parts[1]))==$parts[1]) if (sizeof($this->config->text)>intval($parts[1])) return $this->config->text[intval($parts[1])]["name"]; return $data; } } ?>