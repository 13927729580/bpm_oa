<?php
 require_once('db_common.php'); require_once('tree_connector.php'); class FileSystemDBDataWrapper extends DBDataWrapper { public function select($source) { $relation = $this->getFileName($source->get_relation()); if ($relation == '0') { $relation = ''; } else { $path = $source->get_source(); } $path = $source->get_source(); $path = $this->getFileName($path); $path = realpath($path); if ($path == false) { return new FileSystemResult(); } if (strpos(realpath($path.'/'.$relation), $path) !== 0) { return new FileSystemResult(); } $res = $this->getFilesList($path, $relation); $res = $res->sort($source->get_sort_by(), $this->config->data); return $res; } private function getFilesList($path, $relation) { $fileSystemTypes = FileSystemTypes::getInstance(); LogMaster::log("Query filesystem: ".$path); $dir = opendir($path.'/'.$relation); $result = new FileSystemResult(); for ($i = 0; $i < count($this->config->data); $i++) { $fields[] = $this->config->data[$i]['db_name']; } while ($file = readdir($dir)) { if (($file == '.')||($file == '..')) { continue; } $newFile = array(); $fileNameExt = $this->parseFileName($path.'/'.$relation, $file); if (!$fileSystemTypes->checkFile($file, $fileNameExt)) { continue; } if ((in_array('size', $fields))||(in_array('date', $fields))) { $fileInfo = stat($path.'/'.$file); } for ($i = 0; $i < count($fields); $i++) { $field = $fields[$i]; switch ($field) { case 'filename': $newFile['filename'] = $file; break; case 'full_filename': $newFile['full_filename'] = $path."/".$file; break; case 'size': $newFile['size'] = $fileInfo['size']; break; case 'extention': $newFile['extention'] = $fileNameExt['ext']; break; case 'name': $newFile['name'] = $fileNameExt['name']; break; case 'date': $newFile['date'] = date("Y-m-d H:i:s", $fileInfo['ctime']); break; } $newFile['relation_id'] = $relation.'/'.$file; $newFile['safe_name'] = $this->setFileName($relation.'/'.$file); $newFile['is_folder'] = $fileNameExt['is_dir']; } $result->addFile($newFile); } return $result; } private function setFileName($filename) { $filename = str_replace(".", "{-dot-}", $filename); $filename = str_replace("_", "{-nizh-}", $filename); return $filename; } private function getFileName($filename) { $filename = str_replace("{-dot-}", ".", $filename); $filename = str_replace("{-nizh-}", "_", $filename); return $filename; } private function parseFileName($path, $file) { $result = Array(); if (is_dir($path.'/'.$file)) { $result['name'] = $file; $result['ext'] = 'dir'; $result['is_dir'] = 1; } else { $pos = strrpos($file, '.'); $result['name'] = substr($file, 0, $pos); $result['ext'] = substr($file, $pos + 1); $result['is_dir'] = 0; } return $result; } public function query($sql) { } public function get_new_id() { } public function escape($data) { } public function get_next($res) { return $res->next(); } } class FileSystemResult { private $files; private $currentRecord = 0; public function addFile($file) { $this->files[] = $file; } public function next() { if ($this->currentRecord < count($this->files)) { $file = $this->files[$this->currentRecord]; $this->currentRecord++; return $file; } else { return false; } } public function sort($sort, $data) { if (count($this->files) == 0) { return $this; } for ($i = 0; $i < count($sort); $i++) { $fieldname = $sort[$i]['name']; if (!isset($this->files[0][$fieldname])) { if (isset($data[$fieldname])) { $fieldname = $data[$fieldname]['db_name']; $sort[$i]['name'] = $fieldname; } else { $fieldname = false; } } } for ($i = 0; $i < count($sort); $i++) { if ($sort[$i]['name'] == false) { continue; } $flag = true; while ($flag == true) { $flag = false; for ($j = 0; $j < count($this->files) - 1; $j++) { $equal = true; for ($k = 0; $k < $i; $k++) { if ($this->files[$j][$sort[$k]['name']] != $this->files[$j + 1][$sort[$k]['name']]) { $equal = false; } } if (((($this->files[$j][$sort[$i]['name']] > $this->files[$j + 1][$sort[$i]['name']])&&($sort[$i]['direction'] == 'ASC'))||(($this->files[$j][$sort[$i]['name']] < $this->files[$j + 1][$sort[$i]['name']])&&($sort[$i]['direction'] == 'DESC')))&&($equal == true)) { $c = $this->files[$j]; $this->files[$j] = $this->files[$j+1]; $this->files[$j+1] = $c; $flag = true; } } } } return $this; } } class FileSystemTypes { static private $instance = NULL; private $extentions = Array(); private $extentions_not = Array(); private $all = true; private $patterns = Array(); private $types = Array( 'image' => Array('jpg', 'jpeg', 'gif', 'png', 'tiff', 'bmp', 'psd', 'dir'), 'document' => Array('txt', 'doc', 'docx', 'xls', 'xlsx', 'rtf', 'dir'), 'web' => Array('php', 'html', 'htm', 'js', 'css', 'dir'), 'audio' => Array('mp3', 'wav', 'ogg', 'dir'), 'video' => Array('avi', 'mpg', 'mpeg', 'mp4', 'dir'), 'only_dir' => Array('dir') ); static function getInstance() { if (self::$instance == NULL) { self::$instance = new FileSystemTypes(); } return self::$instance; } public function setExtentions($ext) { $this->all = false; $this->extentions = $ext; } public function addExtention($ext) { $this->all = false; $this->extentions[] = $ext; } public function addExtentionNot($ext) { $this->extentions_not[] = $ext; } public function getExtentions() { return $this->extentions; } public function addPattern($pattern) { $this->all = false; $this->patterns[] = $pattern; } public function clearExtentions() { $this->all = true; $this->extentions = Array(); } public function clearPatterns() { $this->all = true; $this->patterns = Array(); } public function clearAll() { $this->clearExtentions(); $this->clearPatterns(); } public function setType($type, $clear = false) { $this->all = false; if ($type == 'all') { $this->all = true; return true; } if (isset($this->types[$type])) { if ($clear) { $this->clearExtentions(); } for ($i = 0; $i < count($this->types[$type]); $i++) { $this->extentions[] = $this->types[$type][$i]; } return true; } else { return false; } } public function checkFile($filename, $fileNameExt) { if (in_array($fileNameExt['ext'], $this->extentions_not)) { return false; } if ($this->all) { return true; } if ((count($this->extentions) > 0)&&(!in_array($fileNameExt['ext'], $this->extentions))) { return false; } for ($i = 0; $i < count($this->patterns); $i++) { if (!preg_match($this->patterns[$i], $filename)) { return false; } } return true; } } ?>