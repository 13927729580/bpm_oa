<?php	 class GridConfiguration{ protected $headerDelimiter = ','; protected $headerNames = false; protected $headerAttaches = array(); protected $footerAttaches = array(); protected $headerWidthsUnits = 'px'; protected $headerIds = false; protected $headerWidths = false; protected $headerTypes = false; protected $headerAlign = false; protected $headerVAlign = false; protected $headerSorts = false; protected $headerColors = false; protected $headerHidden = false; protected $headerFormat = false; protected $convert_mode = false; function __construct($headers = false){ if ($headers === false || $headers === true ) $this->headerNames = $headers; else $this->setHeader($headers); } private function parse_param_array($param, $check=false, $default = ""){ if (gettype($param) == 'string') $param = explode($this->headerDelimiter, $param); if ($check){ for ($i=0; $i < sizeof($param); $i++) { if (!array_key_exists($param[$i],$check)) $param[$i] = $default; } } return $param; } public function setHeaderDelimiter($headerDelimiter) { $this->headerDelimiter = $headerDelimiter; } public function setHeader($names) { if ($names instanceof DataConfig){ $out = array(); for ($i=0; $i < sizeof($names->text); $i++) $out[]=$names->text[$i]["name"]; $names = $out; } $this->headerNames = $this->parse_param_array($names); } public function setInitWidths($wp) { $this->headerWidths = $this->parse_param_array($wp); $this->headerWidthsUnits = 'px'; } public function setInitWidthsP($wp) { $this->setInitWidths($wp); $this->headerWidthsUnits = '%'; } public function setColAlign($alStr) { $this->headerAlign = $this->parse_param_array($alStr, array("right"=>1, "left"=>1, "center"=>1, "justify"=>1), "left"); } public function setColVAlign($alStr) { $this->headerVAlign = $this->parse_param_array($alStr, array("baseline"=>1, "sub"=>1, "super"=>1, "top"=>1, "text-top"=>1, "middle"=>1, "bottom"=>1, "text-bottom"=>1), "top"); } public function setColTypes($typeStr) { $this->headerTypes = $this->parse_param_array($typeStr); } public function setColSorting($sortStr) { $this->headerSorts = $this->parse_param_array($sortStr); } public function setColColor($colorStr) { $this->headerColors = $this->parse_param_array($colorStr); } public function setColHidden($hidStr) { $this->headerHidden = $this->parse_param_array($hidStr); } public function setColIds($idsStr) { $this->headerIds = $this->parse_param_array($idsStr); } public function setColFormat($formatArr) { $this->headerFormat = $this->parse_param_array($formatArr); } public function attachHeader($values, $styles = null, $footer = false) { $header = array(); $header['values'] = $this->parse_param_array($values); if ($styles != null) { $header['styles'] = $this->parse_param_array($styles); } else { $header['styles'] = null; } if ($footer) $this->footerAttaches[] = $header; else $this->headerAttaches[] = $header; } public function attachFooter($values, $styles = null) { $this->attachHeader($values, $styles, true); } private function auto_fill($mode){ $headerWidths = array(); $headerTypes = array(); $headerSorts = array(); $headerAttaches = array(); for ($i=0; $i < sizeof($this->headerNames); $i++) { $headerWidths[] = 100; $headerTypes[] = "ro"; $headerSorts[] = "connector"; $headerAttaches[] = "#connector_text_filter"; } if ($this->headerWidths == false) $this->setInitWidths($headerWidths); if ($this->headerTypes == false) $this->setColTypes($headerTypes); if ($mode){ if ($this->headerSorts == false) $this->setColSorting($headerSorts); $this->attachHeader($headerAttaches); } } public function defineOptions($conn){ if (!$conn->is_first_call()) return; $config = $conn->get_config(); $full_header = ($this->headerNames === true); if (gettype($this->headerNames) == 'boolean') $this->setHeader($config); $this->auto_fill($full_header); if (isset($_GET["dhx_colls"])) return; $fillList = array(); for ($i = 0; $i < count($this->headerNames); $i++) if ($this->headerTypes[$i] == "co" || $this->headerTypes[$i] == "coro") $fillList[$i] = true; for ($i = 0; $i < count($this->headerAttaches); $i++) { for ($j = 0; $j < count($this->headerAttaches[$i]['values']); $j++) { if ($this->headerAttaches[$i]['values'][$j] == "#connector_select_filter" || $this->headerAttaches[$i]['values'][$j] == "#select_filter") { $fillList[$j] = true;; } } } $temp = array(); foreach($fillList as $k => $v) $temp[] = $k; if (count($temp)) $_GET["dhx_colls"] = implode(",",$temp); } private function getHeaderArray() { $head = Array(); $head[0] = $this->headerNames; $head = $this->getAttaches($head, $this->headerAttaches); return $head; } private function getFooterArray() { $foot = Array(); $foot = $this->getAttaches($foot, $this->footerAttaches); return $foot; } private function getAttaches($to, $from) { for ($i = 0; $i < count($from); $i++) { $line = $from[$i]['values']; $to[] = $line; } return $to; } private function processCspan($data) { $rspan = Array(); for ($i = 0; $i < count($data); $i++) { $last = 0; $rspan[$i] = Array(); for ($j = 0; $j < count($data[$i]); $j++) { $rspan[$i][$j] = 0; if ($data[$i][$j] === '#cspan') { $rspan[$i][$last]++; } else { $last = $j; } } } return $rspan; } private function processRspan($data) { $last = Array(); $cspan = Array(); for ($i = 0; $i < count($data); $i++) { $cspan[$i] = Array(); for ($j = 0; $j < count($data[$i]); $j++) { $cspan[$i][$j] = 0; if (!isset($last[$j])) $last[$j] = 0; if ($data[$i][$j] === '#rspan') { $cspan[$last[$j]][$j]++; } else { $last[$j] = $i; } } } return $cspan; } public function set_convert_mode($mode) { $this->convert_mode = $mode; } public function attachHeaderToXML($conn, $out) { if (!$conn->is_first_call()) return; $head = $this->getHeaderArray(); $foot = $this->getFooterArray(); $rspan = $this->processRspan($head); $cspan = $this->processCspan($head); $str = '<head>'; if ($this->convert_mode) $str .= "<columns>"; for ($i = 0; $i < count($this->headerNames); $i++) { $str .= '<column'; $str .= ' type="'. $this->headerTypes[$i].'"'; $str .= ' width="'.$this->headerWidths[$i].'"'; $str .= $this->headerIds ? ' id="'.$this->headerIds[$i].'"' : ''; $str .= $this->headerAlign[$i] ? ' align="'.$this->headerAlign[$i].'"' : ''; $str .= $this->headerVAlign[$i] ? ' valign="'.$this->headerVAlign[$i].'"' : ''; $str .= $this->headerSorts[$i] ? ' sort="'.$this->headerSorts[$i].'"' : ''; $str .= $this->headerColors[$i] ? ' color="'.$this->headerColors[$i].'"' : ''; $str .= $this->headerHidden[$i] ? ' hidden="'.$this->headerHidden[$i].'"' : ''; $str .= $this->headerFormat[$i] ? ' format="'.$this->headerFormat[$i].'"' : ''; $str .= $cspan[0][$i] ? ' colspan="'.($cspan[0][$i] + 1).'"' : ''; $str .= $rspan[0][$i] ? ' rowspan="'.($rspan[0][$i] + 1).'"' : ''; $str .= '>'.$this->headerNames[$i].'</column>'; } if (!$this->convert_mode) { $str .= '<settings><colwidth>'.$this->headerWidthsUnits.'</colwidth></settings>'; if ((count($this->headerAttaches) > 0)||(count($this->footerAttaches) > 0)) { $str .= '<afterInit>'; } for ($i = 0; $i < count($this->headerAttaches); $i++) { $str .= '<call command="attachHeader">'; $str .= '<param>'.implode(",",$this->headerAttaches[$i]['values']).'</param>'; if ($this->headerAttaches[$i]['styles'] != null) { $str .= '<param>'.implode(",",$this->headerAttaches[$i]['styles']).'</param>'; } $str .= '</call>'; } for ($i = 0; $i < count($this->footerAttaches); $i++) { $str .= '<call command="attachFooter">'; $str .= '<param>'.implode(",",$this->footerAttaches[$i]['values']).'</param>'; if ($this->footerAttaches[$i]['styles'] != null) { $str .= '<param>'.implode(",",$this->footerAttaches[$i]['styles']).'</param>'; } $str .= '</call>'; } if ((count($this->headerAttaches) > 0)||(count($this->footerAttaches) > 0)) { $str .= '</afterInit>'; } } else { $str .= "</columns>"; for ($i = 1; $i < count($head); $i++) { $str .= "<columns>"; for ($j = 0; $j < count($head[$i]); $j++) { $str .= '<column'; $str .= $cspan[$i][$j] ? ' colspan="'.($cspan[$i][$j] + 1).'"' : ''; $str .= $rspan[$i][$j] ? ' rowspan="'.($rspan[$i][$j] + 1).'"' : ''; $str .= '>'.$head[$i][$j].'</column>'; } $str .= "</columns>\n"; } } $str .= '</head>'; if ($this->convert_mode && count($foot) > 0) { $rspan = $this->processRspan($foot); $cspan = $this->processCspan($foot); $str .= "<foot>"; for ($i = 0; $i < count($foot); $i++) { $str .= "<columns>"; for ($j = 0; $j < count($foot[$i]); $j++) { $str .= '<column'; $str .= $cspan[$i][$j] ? ' colspan="'.($cspan[$i][$j] + 1).'"' : ''; $str .= $rspan[$i][$j] ? ' rowspan="'.($rspan[$i][$j] + 1).'"' : ''; $str .= '>'.$foot[$i][$j].'</column>'; } $str .= "</columns>\n"; } $str .= "</foot>"; } $out->add($str); } } ?>